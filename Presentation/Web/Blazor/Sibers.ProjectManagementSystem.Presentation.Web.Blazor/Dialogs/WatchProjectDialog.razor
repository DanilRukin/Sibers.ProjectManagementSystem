@using MediatR
@using Sibers.ProjectManagementSystem.Presentation.Web.Blazor.Dtos
@using Sibers.ProjectManagementSystem.Presentation.Web.Blazor.Dialogs
@using Sibers.ProjectManagementSystem.Presentation.Web.Blazor.Infrastructure.Projects.Queries
@using Sibers.ProjectManagementSystem.Presentation.Web.Blazor.Infrastructure.Employees.Queries


@inject IDialogService DialogService
@inject IMediator Mediator
@inject ISnackbar Snackbar


<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer Style="max-height: 700px; overflow-y: scroll">
            @if (Project == null)
            {
                <MudProgressCircular Indeterminate="true"></MudProgressCircular>
            }
            else
            {
                <MudText GutterBottom="true" Typo="Typo.h4" Align="Align.Center">@Project.Name (приоритет @Project.Priority)</MudText>
                <MudDivider Class="mb-4 mt-2" />
                <MudGrid>
                    <MudItem xs="3">
                        <MudText>Заказчик</MudText>
                        <MudText Typo="Typo.h5">@Project.NameOfTheCustomerCompany</MudText>
                    </MudItem>
                    <MudItem xs="3">
                        <MudText>Разработчик</MudText>
                        <MudText Typo="Typo.h5">@Project.NameOfTheContractorCompany</MudText>
                    </MudItem>
                    <MudItem xs="3">
                        <MudText>Дата начала</MudText>
                        <MudText Typo="Typo.h5">@DateFormat(Project.StartDate)</MudText>
                    </MudItem>
                    <MudItem xs="3">
                        <MudText>Дата окончания</MudText>
                        <MudText Typo="Typo.h5">@DateFormat(Project.EndDate)</MudText>
                    </MudItem>
                </MudGrid>
                <MudText GutterBottom="true" Typo="Typo.h5" Class="mt-5">Руководитель</MudText>
                <MudText>
                    @_managerFullName
                    @if (_manager != null && _manager.Id != 0)
                    {
                        <MudIconButton Color="Color.Dark" Variant="Variant.Text" Icon="@Icons.Filled.RemoveRedEye" @onclick="@(() => OnEmployeeWatch(_manager.Id))" />
                    }
                </MudText>

                <MudDivider Class="mb-5" />
                <MudText GutterBottom="true" Typo="Typo.h5">Сотрудники на проекте</MudText>
                @if (_employees == null)
                {
                    <MudProgressCircular Indeterminate="true"></MudProgressCircular>
                }
                else
                {
                    <MudTable Items="_employees" FixedHeader="true" FixedFooter="true" Hover="true" SortLabel="Sort by">
                        <HeaderContent>
                            <MudTh>
                                <MudTableSortLabel SortBy="new Func<EmployeeDto, object>(e => e.Id)">
                                    Id
                                </MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel SortBy="new Func<EmployeeDto, object>(e => e.FirstName)">
                                    Фамилия
                                </MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel SortBy="new Func<EmployeeDto, object>(e => e.LastName)">
                                    Имя
                                </MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel SortBy="new Func<EmployeeDto, object>(e => e.Patronymic)">
                                    Отчество
                                </MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel SortBy="new Func<EmployeeDto, object>(e => e.Email)">
                                    Email
                                </MudTableSortLabel>
                            </MudTh>
                        </HeaderContent>
                        <RowTemplate Context="emp">
                            <MudTd DataLabel="Id">@emp.Id</MudTd>
                            <MudTd DataLabel="FirstName">@emp.FirstName</MudTd>
                            <MudTd DataLabel="LastName">@emp.LastName</MudTd>
                            <MudTd DataLabel="Patronymic">@emp.Patronymic</MudTd>
                            <MudTd DataLabel="Email">@emp.Email</MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                        </PagerContent>
                    </MudTable>
                }
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Ok">Назад</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private string DateFormat(DateTime date) => $"{date.Day}.{date.Month}.{date.Year}";

    private ICollection<EmployeeDto> _employees = new List<EmployeeDto>();
    private EmployeeDto _manager = new EmployeeDto();
    private string _managerFullName;

    [Parameter]
    public ProjectDto Project { get; set; }

    private DateTime? _projectStartDate;
    private DateTime? _projectEndDate;


    private void OnEmployeeWatch(int employeeId)
    {
        DialogOptions options = new DialogOptions
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };
        DialogParameters parameters = new DialogParameters();
        parameters.Add(nameof(WatchEmployeeDialog.EmployeeToWatch), new EmployeeDto { Id = employeeId });
        var dialog = DialogService.Show<WatchEmployeeDialog>("Просмотр сотрудника", parameters, options);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
        _managerFullName = $"{_manager.FirstName} {_manager.LastName} {_manager.Patronymic}";
    }

    void Ok() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private async Task LoadEmployees()
    {
        GetProjectByIdQuery projectQuery = new GetProjectByIdQuery(Project.Id, true);
        Project = await Mediator.Send(projectQuery);
        if (Project == null)
        {
            Snackbar.Add("Ошибка при обновлении данных проекта", Severity.Error);
        }
        else
        {
            Project.EmployeesIds.Remove(Project.ManagerId);
            GetRangeOfEmployeesQuery employeesQuery = new GetRangeOfEmployeesQuery(Project.EmployeesIds, false);
            var result = await Mediator.Send(employeesQuery);
            if (result == null)
                _employees = new List<EmployeeDto>();
            else
                _employees = result.ToList();
            GetEmployeeByIdQuery managerQuery = new GetEmployeeByIdQuery(Project.ManagerId, false);
            var manager = await Mediator.Send(managerQuery);
            if (manager == null)
                _manager = new EmployeeDto();
            else
                _manager = manager;
        }
    }
}

