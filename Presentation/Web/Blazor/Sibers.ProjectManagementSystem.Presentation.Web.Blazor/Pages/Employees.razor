@page "/employees"

@using MediatR
@using Sibers.ProjectManagementSystem.Presentation.Web.Blazor.Dialogs
@using Sibers.ProjectManagementSystem.Presentation.Web.Blazor.Dtos
@using Sibers.ProjectManagementSystem.Presentation.Web.Blazor.Infrastructure.Employees.Commands
@using Sibers.ProjectManagementSystem.Presentation.Web.Blazor.Infrastructure.Employees.Queries
@using Sibers.ProjectManagementSystem.Presentation.Web.Blazor.Infrastructure.Extensions
@using Sibers.ProjectManagementSystem.SharedKernel
@using Sibers.ProjectManagementSystem.SharedKernel.Results


@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IMediator Mediator


<PageTitle>Все сотрудники компании</PageTitle>
<MudFab Style="position:fixed; bottom:10px; right:10px;" Color="Color.Success"
        StartIcon="@Icons.Material.Filled.Add" @onclick="OnEmployeeCreate" />
<MudText Typo="Typo.h3" GutterBottom="true">Все сотрудники компании</MudText>

@if (_employeesList == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else if (_employeesList.Count == 0)
{
    <MudText Typo="Typo.h5" GutterBottom="true">Здесь ничего нет</MudText>
}
else
{
    <MudTable Style="height:stretch;" Items="_employeesList" FixedHeader="true" FixedFooter="true" Hover="true" SortLabel="Sort by">
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<EmployeeDto, object>(e => e.Id)">
                    Id
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<EmployeeDto, object>(e => e.FirstName)">
                    Фамилия
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<EmployeeDto, object>(e => e.LastName)">
                    Имя
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<EmployeeDto, object>(e => e.Patronymic)">
                    Отчество
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<EmployeeDto, object>(e => e.Email)">
                    Email
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                Действие
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
            <MudTd DataLabel="LastName">@context.LastName</MudTd>
            <MudTd DataLabel="Patronymic">@context.Patronymic</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd>
                <MudIconButton Color="Color.Info" Variant="Variant.Filled" Icon="@Icons.Filled.RemoveRedEye" @onclick="@(() => OnEmployeeWatch(context))">
                </MudIconButton>
                <MudIconButton Color="Color.Success" Variant="Variant.Filled" Icon="@Icons.Filled.Edit" @onclick="() => OnEmployeeEdit(context.Id)">
                </MudIconButton>
                <MudIconButton Color="Color.Error" Variant="Variant.Filled" Icon="@Icons.Filled.Delete" @onclick="@(() => OnEmployeeDelete(context))">
                </MudIconButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
        </PagerContent>
    </MudTable>
}

@code {
    private ICollection<EmployeeDto> _employeesList;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        try
        {
            GetAllEmployeesQuery query = new GetAllEmployeesQuery(false);
            Result<IEnumerable<EmployeeDto>> result = await Mediator.Send(query);
            if (result == null)
                _employeesList = new List<EmployeeDto>();
            else if (result.IsSuccess)
                _employeesList = result.Value.ToList();
            else
            {
                _employeesList = new List<EmployeeDto>();
                Snackbar.Add(result.Errors.AsOneString(), Severity.Error);
            }         
        }
        catch (Exception e)
        {
            Snackbar.Add($"Что-то пошло не так. Причина: {e.ReadErrors()}", Severity.Error);
        }  
    }

    private async Task OnEmployeeEdit(int employeeId)
    {
        EmployeeDto? employeeToEdit = _employeesList.FirstOrDefault(e => e.Id == employeeId);
        if (employeeToEdit == null)
        {
            Snackbar.Add("Не удалось получить сотрудника для редактирования.", Severity.Warning);
            return;
        }
        DialogOptions options = new DialogOptions
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };
        DialogParameters parameters = new DialogParameters();
        parameters.Add(nameof(EditEmployeeDialog.EmployeeToEdit), employeeToEdit);
        var dialog = DialogService.Show<EditEmployeeDialog>("Управление сотрудником", parameters, options);
        using var task = dialog.Result;
        var result = await task;
        if (result != null && !result.Cancelled && (result.Data is bool ok))
        {
            GetEmployeeByIdQuery query = new(employeeId, false);
            Result<EmployeeDto> updatedResult = await Mediator.Send(query);
            if (updatedResult.IsSuccess)
            {
                _employeesList.RemoveWithCriterion(e => e.Id == employeeId);
                _employeesList.Add(updatedResult.Value);
            }
            else
            {
                Snackbar.Add($"Не удалось получить обновленные данные сотрудника."
                + $" Причина: {updatedResult.Errors.AsOneString()}", Severity.Error);
            }
        }
    }

    private void OnEmployeeWatch(EmployeeDto employee)
    {
        DialogOptions options = new DialogOptions
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };
        DialogParameters parameters = new DialogParameters();
        parameters.Add(nameof(WatchEmployeeDialog.EmployeeToWatch), employee);
        var dialog = DialogService.Show<WatchEmployeeDialog>("Просмотр сотрудника", parameters, options);
    }

    private async Task OnEmployeeCreate()
    {
        DialogOptions options = new DialogOptions
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };
        var dialog = DialogService.Show<CreateEmployeeDialog>("Создание сотрудника", options);
        using var task = dialog.Result;
        var result = await task;
        if (result != null && !result.Cancelled && (result.Data is EmployeeDto employee))
        {
            _employeesList.Add(employee);
        }
    }

    private async Task OnEmployeeDelete(EmployeeDto employee)
    {
        bool? result = await DialogService.ShowMessageBox(
            title: $"Удаление сотрудника '{employee.FirstName} {employee.LastName} {employee.Patronymic}'",
            markupMessage: new MarkupString("Вы действительно хотите удалить сотрудника? Действие невозможно будет отменить"),
            yesText: "Удалить",
            cancelText: "Отмена"
        );
        if (result != null && result == true)
        {
            DeleteEmployeeCommand command = new(employee.Id);
            Result deleteResult = await Mediator.Send(command);
            if (deleteResult.IsSuccess)
            {
                _employeesList.Remove(employee);
                Snackbar.Add("Сотрудник был удален", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Сотрудник не был удален. Причина: {deleteResult.Errors.AsOneString()}", Severity.Error);
            }
        }
    }
}

